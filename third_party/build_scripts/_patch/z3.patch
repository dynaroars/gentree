diff --git a/src/util/memory_manager.cpp b/src/util/memory_manager.cpp
index a325afca7..244505fac 100644
--- a/src/util/memory_manager.cpp
+++ b/src/util/memory_manager.cpp
@@ -35,16 +35,16 @@ out_of_memory_error::out_of_memory_error():z3_error(ERR_MEMOUT) {
 }
 
 
-static DECLARE_INIT_MUTEX(g_memory_mux);
+//static DECLARE_INIT_MUTEX(g_memory_mux);
 static atomic<bool> g_memory_out_of_memory(false);
-static bool       g_memory_initialized       = false;
-static long long  g_memory_alloc_size        = 0;
-static long long  g_memory_max_size          = 0;
-static long long  g_memory_max_used_size     = 0;
-static long long  g_memory_watermark         = 0;
-static long long  g_memory_alloc_count       = 0;
-static long long  g_memory_max_alloc_count   = 0;
-static bool       g_exit_when_out_of_memory  = false;
+static atomic<bool     >  g_memory_initialized       { false };
+static atomic<long long>  g_memory_alloc_size        { 0 };
+static atomic<long long>  g_memory_max_size          { 0 };
+static atomic<long long>  g_memory_max_used_size     { 0 };
+static atomic<long long>  g_memory_watermark         { 0 };
+static atomic<long long>  g_memory_alloc_count       { 0 };
+static atomic<long long>  g_memory_max_alloc_count   { 0 };
+static atomic<bool     >  g_exit_when_out_of_memory  { false };
 static char const * g_out_of_memory_msg      = "ERROR: out of memory";
 
 void memory::exit_when_out_of_memory(bool flag, char const * msg) {
@@ -113,7 +113,7 @@ void memory::set_high_watermark(size_t watermark) {
 bool memory::above_high_watermark() {
     if (g_memory_watermark == 0)
         return false;
-    lock_guard lock(*g_memory_mux);
+    //lock_guard lock(*g_memory_mux);
     return g_memory_watermark < g_memory_alloc_size;
 }
 
@@ -145,7 +145,7 @@ void memory::finalize() {
 unsigned long long memory::get_allocation_size() {
     long long r;
     {
-        lock_guard lock(*g_memory_mux);
+        //lock_guard lock(*g_memory_mux);
         r = g_memory_alloc_size;
     }
     if (r < 0)
@@ -156,7 +156,7 @@ unsigned long long memory::get_allocation_size() {
 unsigned long long memory::get_max_used_memory() {
     unsigned long long r;
     {
-        lock_guard lock(*g_memory_mux);
+        //lock_guard lock(*g_memory_mux);
         r = g_memory_max_used_size;
     }
     return r;
@@ -233,11 +233,11 @@ static void synchronize_counters(bool allocating) {
     bool out_of_mem = false;
     bool counts_exceeded = false;
     {
-        lock_guard lock(*g_memory_mux);
+        //lock_guard lock(*g_memory_mux);
         g_memory_alloc_size += g_memory_thread_alloc_size;
         g_memory_alloc_count += g_memory_thread_alloc_count;
         if (g_memory_alloc_size > g_memory_max_used_size)
-            g_memory_max_used_size = g_memory_alloc_size;
+            g_memory_max_used_size = g_memory_alloc_size.load();
         if (g_memory_max_size != 0 && g_memory_alloc_size > g_memory_max_size)
             out_of_mem = true;
         if (g_memory_max_alloc_count != 0 && g_memory_alloc_count > g_memory_max_alloc_count)
@@ -314,7 +314,7 @@ void memory::deallocate(void * p) {
     size_t sz      = *sz_p;
     void * real_p  = reinterpret_cast<void*>(sz_p);
     {
-        lock_guard lock(*g_memory_mux);
+        //lock_guard lock(*g_memory_mux);
         g_memory_alloc_size -= sz;
     }
     free(real_p);
@@ -323,7 +323,7 @@ void memory::deallocate(void * p) {
 void * memory::allocate(size_t s) {
     s = s + sizeof(size_t); // we allocate an extra field!
     {
-        lock_guard lock(*g_memory_mux);
+        //lock_guard lock(*g_memory_mux);
         g_memory_alloc_size += s;
         g_memory_alloc_count += 1;
         if (g_memory_alloc_size > g_memory_max_used_size)
@@ -348,7 +348,7 @@ void* memory::reallocate(void *p, size_t s) {
     void * real_p  = reinterpret_cast<void*>(sz_p);
     s = s + sizeof(size_t); // we allocate an extra field!
     {
-        lock_guard lock(*g_memory_mux);
+        //lock_guard lock(*g_memory_mux);
         g_memory_alloc_size += s - sz;
         g_memory_alloc_count += 1;
         if (g_memory_alloc_size > g_memory_max_used_size)
