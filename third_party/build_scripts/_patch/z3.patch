diff --git a/src/util/memory_manager.cpp b/src/util/memory_manager.cpp
index a325afca7..6d23f3426 100644
--- a/src/util/memory_manager.cpp
+++ b/src/util/memory_manager.cpp
@@ -12,6 +12,9 @@ Copyright (c) 2015 Microsoft Corporation
 #include "util/memory_manager.h"
 #include "util/error_codes.h"
 #include "util/debug.h"
+
+#define _USE_THREAD_LOCAL 1
+
 // The following two function are automatically generated by the mk_make.py script.
 // The script collects ADD_INITIALIZER and ADD_FINALIZER commands in the .h files.
 // For example, rational.h contains
@@ -38,9 +41,9 @@ out_of_memory_error::out_of_memory_error():z3_error(ERR_MEMOUT) {
 static DECLARE_INIT_MUTEX(g_memory_mux);
 static atomic<bool> g_memory_out_of_memory(false);
 static bool       g_memory_initialized       = false;
-static long long  g_memory_alloc_size        = 0;
+static atomic<long long>  g_memory_alloc_size        { 0 };
 static long long  g_memory_max_size          = 0;
-static long long  g_memory_max_used_size     = 0;
+static atomic<long long>  g_memory_max_used_size     { 0 };
 static long long  g_memory_watermark         = 0;
 static long long  g_memory_alloc_count       = 0;
 static long long  g_memory_max_alloc_count   = 0;
@@ -113,7 +116,7 @@ void memory::set_high_watermark(size_t watermark) {
 bool memory::above_high_watermark() {
     if (g_memory_watermark == 0)
         return false;
-    lock_guard lock(*g_memory_mux);
+    //lock_guard lock(*g_memory_mux);
     return g_memory_watermark < g_memory_alloc_size;
 }
 
@@ -145,7 +148,7 @@ void memory::finalize() {
 unsigned long long memory::get_allocation_size() {
     long long r;
     {
-        lock_guard lock(*g_memory_mux);
+        //lock_guard lock(*g_memory_mux);
         r = g_memory_alloc_size;
     }
     if (r < 0)
@@ -156,7 +159,7 @@ unsigned long long memory::get_allocation_size() {
 unsigned long long memory::get_max_used_memory() {
     unsigned long long r;
     {
-        lock_guard lock(*g_memory_mux);
+        //lock_guard lock(*g_memory_mux);
         r = g_memory_max_used_size;
     }
     return r;
@@ -237,7 +240,7 @@ static void synchronize_counters(bool allocating) {
         g_memory_alloc_size += g_memory_thread_alloc_size;
         g_memory_alloc_count += g_memory_thread_alloc_count;
         if (g_memory_alloc_size > g_memory_max_used_size)
-            g_memory_max_used_size = g_memory_alloc_size;
+            g_memory_max_used_size = g_memory_alloc_size.load();
         if (g_memory_max_size != 0 && g_memory_alloc_size > g_memory_max_size)
             out_of_mem = true;
         if (g_memory_max_alloc_count != 0 && g_memory_alloc_count > g_memory_max_alloc_count)
